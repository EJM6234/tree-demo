{"version":3,"sources":["components/Main/Content/Content.js","components/Main/ItemForm/ItemForm.js","components/Main/TreeMenu/TreeCategory/TreeItem/TreeItem.js","components/Main/TreeMenu/TreeCategory/TreeCategory.js","components/Main/TreeMenu/TreeMenu.js","helpers/setupTreeData.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Content","react_default","a","createElement","className","this","props","children","Component","ItemForm","_this","path","map","segment","i","label","length","concat","key","htmlFor","name","value","onChange","handleChange","id","onClick","removeSubCategory","price","disabled","addSubCategory","includes","handleSubmit","clearForm","TreeItem","state","isUpdating","editPrice","undefined","e","setState","target","handleDeleteClick","handleDelete","handleUpdateClick","prevState","handlePriceUpdate","category","TreeCategory","isOpen","handleOpen","_this2","categories","Object","keys","treeRenderData","reactstrap_es","Array","isArray","TreeItem_TreeItem","TreeMenu","categoryKeys","Fragment","TreeCategory_TreeCategory","setupTreeData","renderData","fullPath","fullRenderData","slice","Main","prevPath","preventDefault","match","parseInt","defineProperty","axios","delete","then","res","data","forEach","item","split","catch","err","console","error","put","post","join","prevTreeRenderData","removeIndex","filter","val","get","Content_Content_Content","ItemForm_ItemForm","TreeMenu_TreeMenu","App","style","backgroundImage","Main_Main_Main","Boolean","window","location","hostname","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0fc0565c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Content.css';\n\nexport default class Content extends Component {\n    render() {\n        return (\n            <div className='content-container'>\n                {this.props.children}\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\n\nexport default class ItemForm extends Component {\n    render() {\n        return (\n            <div className='row'>\n                <div className='col'>\n                    {\n                        this.props.path.map((segment, i) => {\n                            const label = i === 0 ? 'Category' : i === this.props.path.length-1 ? 'Item' : `Sub-Category ${i}`;\n                            return (\n                                <div key={`category${i}`} className='row'>\n                                    <div className='col'>\n                                        <label htmlFor={`category${i}`}>{label}</label>\n                                        <input \n                                            name={`category${i}`} \n                                            value={segment} \n                                            onChange={this.props.handleChange} />\n                                        {\n                                            label !== 'Category' && label !== 'Item' &&\n                                                <button \n                                                    id={`removeSub${i}`} \n                                                    onClick={this.props.removeSubCategory}>\n                                                        -\n                                                </button>\n                                        }\n                                    </div>\n                                </div>\n                            );\n                        })\n                    }\n                    <div className='row'>\n                        <div className='col'>\n                            <label htmlFor={`price`}>Price</label>\n                            <input \n                                name={`price`} \n                                value={this.props.price} \n                                onChange={this.props.handleChange} />\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className='col'>\n                            <button \n                                disabled={this.props.path.length >= 12} \n                                onClick={this.props.addSubCategory}>\n                                    Add Sub-Category\n                            </button>\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className='col'>\n                            <button \n                                disabled={this.props.path.includes(\"\")}\n                                onClick={this.props.handleSubmit}>\n                                    Submit\n                            </button>\n                        </div>\n                    </div>\n                    <div className='row'>\n                        <div className='col'>\n                            <button\n                                onClick={this.props.clearForm}>\n                                    Clear\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\n\nexport default class TreeItem extends Component {\n    state = {\n        isUpdating: false,\n        editPrice: undefined\n    }\n\n    handleChange = (e) => {\n        this.setState({ editPrice: e.target.value })\n    }\n\n    handleDeleteClick = () => {\n        this.props.handleDelete(this.props.id);\n    }\n\n    handleUpdateClick = () => {\n        this.setState((prevState, props) => ({ \n            isUpdating: !prevState.isUpdating,\n            editPrice: props.price  \n        }));\n        if(this.state.isUpdating) this.props.handlePriceUpdate(this.props.id, this.state.editPrice);\n    }\n\n    render() {\n        return (\n            <ul>\n                <li>\n                    {this.props.category}:\n                    {\n                        this.state.isUpdating \n                            ? <input \n                                name={`priceUpdate${this.props.id}`} \n                                value={this.state.editPrice} \n                                onChange={this.handleChange} />\n                            : <span>${this.props.price}</span>\n                    }\n                    <i className='fa fa-trash' onClick={this.handleDeleteClick} />\n                    <i className='fa fa-pencil-alt' onClick={this.handleUpdateClick} />\n                </li>\n\n            </ul>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Collapse } from 'reactstrap';\nimport TreeItem from './TreeItem';\n\nexport default class TreeCategory extends Component {\n    state = {\n        isOpen: false\n    }\n\n    handleOpen = () => {\n        this.setState(prevState => ({ isOpen: !prevState.isOpen }));\n    }\n\n    render() {\n        const categories = Object.keys(this.props.treeRenderData);\n        return (\n            <ul>    \n                <div onClick={this.handleOpen}>\n                    <i className={this.state.isOpen ? 'fa fa-angle-down' : 'fa fa-angle-right'} />\n                    <span>{this.props.category}</span>\n                </div>\n                <Collapse isOpen={this.state.isOpen}>\n                    {\n                        categories.map((category, i) => {\n                            if(!Array.isArray(this.props.treeRenderData[category])) {\n                                return (\n                                    <TreeCategory \n                                        key={i} \n                                        category={category}\n                                        handleChange={this.handleChange}\n                                        handleDelete={this.props.handleDelete}\n                                        handlePriceUpdate={this.props.handlePriceUpdate}\n                                        treeRenderData={this.props.treeRenderData[category]} />\n                                );\n                            } else {\n                                return (\n                                    <TreeItem \n                                        key={i}\n                                        category={category}\n                                        handleChange={this.handleChange}\n                                        handleDelete={this.props.handleDelete}\n                                        handlePriceUpdate={this.props.handlePriceUpdate}                                        \n                                        id={this.props.treeRenderData[category][0]}\n                                        price={this.props.treeRenderData[category][1]} />\n                                );\n                            }\n                        })\n                    }\n                </Collapse>\n            </ul>\n        )\n    }\n}","import React, { Component } from 'react';\nimport TreeCategory from './TreeCategory';\n\nexport default class TreeMenu extends Component {\n    render() {\n        let categoryKeys;\n        if(this.props.treeRenderData) categoryKeys = Object.keys(this.props.treeRenderData);\n        return (\n            <>\n                {\n                    categoryKeys \n                        ? categoryKeys.map((category, i) => {\n                            return <TreeCategory \n                                key={i} \n                                category={category}\n                                handleDelete={this.props.handleDelete}\n                                handlePriceUpdate={this.props.handlePriceUpdate}\n                                treeRenderData={this.props.treeRenderData[category]} />\n                        })\n                        : null\n                }\n            </>\n        )\n    }\n}","export const setupTreeData = (path, renderData, fullPath, fullRenderData, price, id) => {\n    if (renderData[path[0]]) return setupTreeData(path.slice(1), renderData[path[0]], fullPath, fullRenderData, price, id);\n    if (path.length > 1) {\n        renderData[path[0]] = {};\n        return setupTreeData(path.slice(1), renderData[path[0]], fullPath, fullRenderData, price, id);\n    }\n    renderData[path[0]] = [id, price];\n    return fullRenderData;\n}","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Content from './Content/Content';\nimport ItemForm from './ItemForm';\nimport TreeMenu from './TreeMenu';\nimport { setupTreeData } from '../../helpers/setupTreeData';\nimport './Main.css';\n\nexport default class Main extends Component {\n    state = {\n        path: [\"\", \"\"],\n        price: \"0\",\n        treeRenderData: {}\n    }\n\n    componentDidMount() {\n        axios\n            .get('/items')\n            .then((res) => {\n                let treeRenderData = {};\n                res.data.forEach((item) => {\n                    const path = item.path.split(\".\");\n                    setupTreeData(path, treeRenderData, path, treeRenderData, item.price, item.id);\n                });\n                this.setState({ treeRenderData });\n            })\n            .catch((err) => console.error(err));\n    }\n\n    addSubCategory = () => {\n        if(this.state.path.length < 12) {\n            let prevPath = this.state.path;\n            let path = prevPath.slice(0, prevPath.length-1).concat([\"\", prevPath[prevPath.length-1]]);\n            this.setState({ path });\n        }\n    }\n\n    clearForm = () => {\n        this.setState({ \n            path: [\"\", \"\"],\n            price: \"0\"\n        })\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        if(e.target.name.match(/category/g) !== null) {\n            let path = this.state.path;\n            path[parseInt(e.target.name.match(/\\d+/g)[0])] = e.target.value;\n            this.setState({ path });\n        } else {\n            this.setState({ [e.target.name]: e.target.value });\n        }\n    }\n\n    handleDelete = (id) => {\n        axios\n            .delete(`/items/${id}`)\n            .then((res) => {\n                const treeRenderData = {};\n                res.data.forEach((item) => {\n                    const path = item.path.split(\".\");\n                    setupTreeData(path, treeRenderData, path, treeRenderData, item.price, item.id);\n                });\n                this.setState({ treeRenderData });\n            })\n            .catch((err) => console.error(err));\n    }\n\n    handlePriceUpdate = (id, editPrice) => {\n        axios\n            .put(`/items/${id}`, {\n                price: editPrice\n            })\n            .then((res) => {\n                const treeRenderData = {};\n                res.data.forEach((item) => {\n                    const path = item.path.split(\".\");\n                    setupTreeData(path, treeRenderData, path, treeRenderData, item.price, item.id);\n                });\n                this.setState({ treeRenderData });\n            })\n            .catch((err) => console.error(err));\n    }\n\n    handleSubmit = () => {\n        axios\n            .post('/items/create', {\n                path: this.state.path.join('.'),\n                price: this.state.price\n            })\n            .then((res) => {\n                const path = res.data.path.split(\".\");\n                const prevTreeRenderData = this.state.treeRenderData;\n                const treeRenderData = setupTreeData(path, prevTreeRenderData, path, prevTreeRenderData, res.data.price, res.data.id);\n                this.setState({ treeRenderData });\n            })\n            .catch(err => console.error(err));\n    }\n\n    removeSubCategory = (e) => {\n        const prevPath = this.state.path;\n        const removeIndex = parseInt(e.target.id.match(/\\d+/g));\n        const path = prevPath.filter((val, i) => i !== removeIndex);\n        this.setState({ path });\n    }\n\n    render() {\n        return (\n            <div className='container'>\n                <div className='row'>\n                    <div className='col-6'>\n                        <Content>\n                            <ItemForm\n                                addSubCategory={this.addSubCategory}\n                                clearForm={this.clearForm} \n                                handleChange={this.handleChange}\n                                handleSubmit={this.handleSubmit} \n                                path={this.state.path}\n                                price={this.state.price}\n                                removeSubCategory={this.removeSubCategory} />\n                        </Content>\n                    </div>\n                    <div className='col-6'>\n                        <Content>\n                            <TreeMenu \n                                handleChange={this.handleChange}\n                                handleDelete={this.handleDelete}\n                                handlePriceUpdate={this.handlePriceUpdate}\n                                treeRenderData={this.state.treeRenderData} />\n                        </Content>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport Main from './components/Main';\nimport './App.css';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div id='background' style={{backgroundImage: 'url(\"img/background.jpg\")'}}>\n        <Main />\n      </div>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}